using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Timers;
using System.Security.Cryptography;

namespace _325_Malware_Detection_Service
{
    public partial class Service1 : ServiceBase
    {
        Timer timer = new Timer();
        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            Scan();
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            timer.Interval = 5 * 60000; //number in minutes multiplied to turn it into miliseconds
            timer.Enabled = true;

            if (!Directory.Exists(@"C:\KIT325_Malware_Quarantine"))
            {
                Directory.CreateDirectory(@"C:\KIT325_Malware_Quarantine");
            }
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }

        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            WriteToFile("   Scanned at " + DateTime.Now);
            Scan();
        }

        public void Scan()
        {
            string[] knownHashes = Properties.Resources.VirusShare_00000.Split(new string[] { "\r\n" }, StringSplitOptions.None);
            Dictionary<Process, string> malware = new Dictionary<Process, string>();
            Process[] processCollection = Process.GetProcesses();
            foreach (Process p in processCollection)
            {
                try
                {
                    string fileName = p.MainModule.FileName;
                    string hash = CalculateMD5(fileName);
                    long memUsage = p.WorkingSet64;

                    //check hash against known hashes
                    if (knownHashes.Contains(hash))
                    {
                        malware[p] = "Known Malware";
                    }

                    //check explorer
                    //if (fileName == "explorer.exe" || fileName == "Explorer.EXE" & CheckExplorer(fileName, memUsage) != "Safe")
                    //{
                    //    malware[p] = CheckExplorer(fileName, memUsage);
                    //}
                }
                catch (Exception exception) //I think this is only happening when it's an important windows process
                {
                }
            }

            if (malware.Count() > 0){
                WriteToFile("       Malware Found");
                WriteToFile("       _____________");
                foreach (var m in malware)
                {
                    string name = "       - " + m.Key.ProcessName + " (" + m.Value + ")";

                    //Quarantine
                    string filePath = m.Key.MainModule.FileName;
                    string fileName = m.Key.MainModule.ModuleName;

                    File.Move(filePath, @"C:\KIT325_Malware_Quarantine\" + fileName);

                    //Kill
                    m.Key.Kill();

                    WriteToFile(name);
                }
            }
        }

        private string CheckExplorer(string filePath, long memUsage)
        {
            if (filePath != "C:\\WINDOWS\\explorer.exe")
            {
                return "Found at wrong file path";
            }
            else if (memUsage > 3)
            {
                return "Using too much memory";
            }
            else
            {
                return "Safe";
            }
        }

        static string CalculateMD5(string filename)
        {
            using (var md5 = MD5.Create())
            {
                using (var stream = File.OpenRead(filename))
                {
                    var hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string filepath = AppDomain.CurrentDomain.BaseDirectory + "\\Logs\\ServiceLog_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') + ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }
    }
}
