using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Security.Cryptography;
using System.IO;
using System.ServiceProcess;

namespace KIT325_Malware_Detection
{
    public partial class Form1 : Form
    {
        public class processClassification
        {
            public string filePath { get; set; }
            public Process process { get; set; }
            public String classification { get; set; }
        }

        public class fileClassification
        {
            public String filePath { get; set; }
            public String ext { get; set; }
            public String realExt { get; set; }
            public bool badExt { get; set; }
        }

        public static Dictionary<String, processClassification> scanned = new Dictionary<String, processClassification> ();
        public static Dictionary<String, fileClassification> fileScanned = new Dictionary<String, fileClassification>();

        public Form1()
        {
            InitializeComponent();
            this.Text = "KIT325_Malware_Detection";

            ServiceController service = new ServiceController("325 Malware Detection");

            if (service.Status.Equals(ServiceControllerStatus.Running))
            {
                Start_Service.Text = "Stop Service";
            }
        }

        static string CalculateMD5(string filename)
        {
            Console.WriteLine(filename);
            using (var md5 = MD5.Create())
            {
                using (var stream = File.OpenRead(filename))
                {
                    var hash = md5.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        private void SwitchView(bool visible)
        {
            KillProcess.Enabled = false;
            Quarantine.Enabled = false;
            Console.WriteLine("Scan: " + Scanned.SelectedIndex + ", Trojan: " + TrojanList.SelectedIndex);
            if (visible == true & Malware.SelectedIndex != -1)
            {
                String selectedPath = scanned[Malware.SelectedItem.ToString().Split(' ')[0]].filePath;
                if ( selectedPath == FilePath.Text )
                {
                    Quarantine.Enabled = true;
                    KillProcess.Enabled = true;
                }
            }
            if (visible == false & TrojanList.SelectedIndex != -1)
            {
                fileClassification file = fileScanned[TrojanList.SelectedItem.ToString().Split(' ')[0]];
                if (file.badExt) { Quarantine.Enabled = true; }
            }

            TrojanList.Visible = !visible;
            TrojanListLabel.Visible = !visible;
            TrojanDetails.Visible = !visible;
            TrojanDetailsLabel.Visible = !visible;

            Scanned.Visible = visible;
            Scanned_label.Visible = visible;
            Malware.Visible = visible;
            Malware_label.Visible = visible;
        }

        private void Start_Scan_Click(object sender, EventArgs e)
        {
            radioButton1.Checked = true;
            Start_Scan.Enabled = false;

            string[] knownHashes = Properties.Resources.VirusShare_00000.Split(new string[] { "\r\n" }, StringSplitOptions.None);

            Process[] processCollection = Process.GetProcesses();

            int count = processCollection.Length;
            int i = 0;
            foreach (Process p in processCollection)
            {
                try
                {
                    string filePath = p.MainModule.FileName;
                    string fileName = p.MainModule.ModuleName;
                    string hash = CalculateMD5(filePath);
                    long memUsage = p.WorkingSet64;

                    processClassification classification = new processClassification();
                    classification.process = p;
                    classification.classification = "Safe";
                    classification.filePath = filePath;

                    //check hash against known hashes
                    if (knownHashes.Contains(hash))
                    {
                        classification.classification = "Known Malware";
                    }
                    //check explorer
                    if (fileName == "explorer.exe" || fileName =="Explorer.EXE" & CheckExplorer(filePath, memUsage) != "Safe")
                    {
                        classification.classification = CheckExplorer(filePath, memUsage);
                    }

                    if (!Scanned.Items.Contains(fileName))
                    {
                        Scanned.Items.Add(fileName);
                        scanned.Add(fileName, classification);

                        if (classification.classification != "Safe")
                        {
                            Malware.Items.Add(fileName + "  (" + classification.classification + ")");
                        }
                    }
                }
                catch (Exception exception) //I think this is only happening when it's an important windows process
                {
                }
            }
            Start_Scan.Enabled = true;
        }

        private string CheckExplorer(string filePath, long memUsage)
        {
            if (filePath != "C:\\WINDOWS\\explorer.exe" & filePath != "C:\\WINDOWS\\Explorer.EXE")
            {
                return "Found at wrong file path";
            }
            else if (memUsage > 3)
            {
                return "Using too much memory";
            }
            else
            {
                return "Safe";
            }
        }

        private void Start_Service_Click(object sender, EventArgs e)
        {
            ServiceController service = new ServiceController("325 Malware Detection");

            if ((service.Status.Equals(ServiceControllerStatus.Stopped)) || (service.Status.Equals(ServiceControllerStatus.StopPending)))
            {
                service.Start();
                Start_Service.Text = "Stop Service";
            }
            else
            {
                service.Stop();
                Start_Service.Text = "Start Service";
            }
        }

        private void Scanned_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Scanned.SelectedIndex != -1)
            {
                Quarantine.Enabled = false;
                KillProcess.Enabled = false;

                processClassification classification = scanned[Scanned.SelectedItem.ToString()];
                Process process = classification.process;
                FilePath.Text = process.MainModule.FileName;
                MemoryUsage.Text = process.WorkingSet64.ToString();
                Hash.Text = CalculateMD5(classification.filePath);
            }
        }

        private void Malware_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Malware.SelectedIndex != -1)
            {
                string fileName = Malware.SelectedItem.ToString();
                int i = fileName.IndexOf("(");
                fileName = fileName.Remove(i - 2, fileName.Length - i + 2);

                processClassification classification = scanned[fileName];
                Process process = classification.process;
                FilePath.Text = classification.filePath;
                MemoryUsage.Text = process.WorkingSet64.ToString();
                Hash.Text = CalculateMD5(FilePath.Text);

                Quarantine.Enabled = true;
                KillProcess.Enabled = true;
            }
        }

        private void CheckTrojan_Click(object sender, EventArgs e)
        {
            radioButton2.Checked = true;

            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            DialogResult result = openFileDialog1.ShowDialog(); // Show the dialog.
            if (result == DialogResult.OK) // Test result.
            {
                string fileName = openFileDialog1.SafeFileName;
                string filePath = openFileDialog1.FileName;
                string ext = System.IO.Path.GetExtension(filePath).ToLower();
                Console.WriteLine(filePath);

                BinaryReader reader = new BinaryReader(new FileStream(Convert.ToString(filePath), FileMode.Open, FileAccess.Read, FileShare.None));
                reader.BaseStream.Position = 0x0;
                byte[] data = reader.ReadBytes(0x10);
                string data_as_hex = BitConverter.ToString(data);

                reader.Close();

                Console.WriteLine(":___" + data_as_hex);

                string substring = data_as_hex.Substring(0, 11);

                Console.WriteLine(substring);

                //check against magic numbers
                string output = "unknown";
                switch (substring)
                {
                    case "25-50-44-46":
                        output = ".pdf";
                        break;
                    case "89-50-4E-47":
                        output = ".png";
                        break;
                    case "ff-d8-ff-e0":
                        output = ".jpeg";
                        break;
                    case "47-49-46-38":
                        output = ".gif";
                        break;
                    case "38-42-50-53":
                        output = ".psd";
                        break;
                    case "49-49-2A-00":
                        output = ".tif";
                        break;
                    case "4D-4D-00-2A":
                        output = ".tif";
                        break;
                    case "50-4B-03-04":
                        output = ".zip";
                        break;
                }
                if (substring.StartsWith("4D-5A")) { output = ".exe"; }

                Console.WriteLine(output);

                fileClassification classification = new fileClassification();
                if (output == "unknown")
                {
                    classification.badExt = true;
                    classification.filePath = filePath;
                    classification.ext = ext;
                    classification.realExt = output;
                    fileScanned.Add(fileName, classification);

                    TrojanList.Items.Add(fileName + "  (Unknown extension)");
                }
                else if (output != ext)
                {
                    classification.badExt = true;
                    classification.filePath = filePath;
                    classification.ext = ext;
                    classification.realExt = output;
                    fileScanned.Add(fileName, classification);

                    TrojanList.Items.Add(fileName + "  (Bad extenstion!)");
                }
                else
                {
                    classification.badExt = false;
                    classification.filePath = filePath;
                    classification.ext = ext;
                    classification.realExt = output;
                    fileScanned.Add(fileName, classification);

                    TrojanList.Items.Add(fileName);
                }
            }
        }

        private void TrojanList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (TrojanList.SelectedIndex != -1)
            {
                string fileName = TrojanList.SelectedItem.ToString();
                int i = fileName.IndexOf("(");
                if (i > 0)
                {
                    fileName = fileName.Remove(i - 2, fileName.Length - i + 2);
                }

                Console.WriteLine(fileName);

                String filePath = fileScanned[fileName].filePath;
                String ext = fileScanned[fileName].ext;
                String realExt = fileScanned[fileName].realExt;
                bool badExtension = fileScanned[fileName].badExt;

                String title;
                if (realExt == "unknown") { title = fileName + "    (Unknown extension)"; }
                else if (badExtension) { title = fileName + "    (Bad extenstion!)"; }
                else { title = fileName; }

                TrojanDetails.Text = title + ":\n     Path: " + filePath + "\n     Extension: " + ext + "\n     Actual extension: " + realExt;
                
                if (badExtension) { Quarantine.Enabled = true; }
                else { Quarantine.Enabled = false; }
            }
        }

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            Console.WriteLine(radioButton1.Checked);
            if (radioButton1.Checked) { SwitchView(true); }
            else { SwitchView(false); }
        }

        private void Quarantine_Click(object sender, EventArgs e)
        {
            if (!Directory.Exists(@"C:\KIT325_Malware_Quarantine"))
            {
                Directory.CreateDirectory(@"C:\KIT325_Malware_Quarantine");
            }

            string filePath;
            string fileName;
            string newMessage = "    --Quarantined";
            if (radioButton1.Checked)
            {
                fileName = Malware.SelectedItem.ToString();
                int i = fileName.IndexOf("(");
                fileName = fileName.Remove(i - 2, fileName.Length - i + 2);

                Process p = scanned[fileName].process;
                filePath = p.MainModule.FileName;

                newMessage = Malware.SelectedItem + newMessage;
                int index = Malware.SelectedIndex;
                Malware.Items[index] = newMessage;

                scanned[fileName].filePath = @"C:\KIT325_Malware_Quarantine\" + fileName;
            }
            else
            {
                fileName = TrojanList.SelectedItem.ToString();
                int i = fileName.IndexOf("(");
                fileName = fileName.Remove(i - 2, fileName.Length - i + 2);

                fileClassification file = fileScanned[fileName];
                filePath = file.filePath;

                newMessage = TrojanList.SelectedItem + newMessage;
                int index = TrojanList.SelectedIndex;
                TrojanList.Items[index] = newMessage;
            }

            File.Move(filePath, @"C:\KIT325_Malware_Quarantine\" + fileName);
        }

        private void KillProcess_Click(object sender, EventArgs e)
        {
            string fileName = Malware.SelectedItem.ToString();
            int i = fileName.IndexOf("(");
            fileName = fileName.Remove(i - 2, fileName.Length - i + 2);

            Process p = scanned[fileName].process;
            p.Kill();

            if (scanned.ContainsKey("cmd.exe"))
            {
                var formPopup = new Form();
                formPopup.Text = "Kill cmd.exe?";

                Label text = new Label();
                Button yes = new Button();
                Button no = new Button();

                text.Text = "Command prompt is also running and may have been used by " + fileName;
                text.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
                text.AutoSize = true;
                text.Location = new System.Drawing.Point(12, 12);
                yes.Text = "Kill cmd.exe?";
                yes.AutoSize = true;
                yes.Location = new System.Drawing.Point(100, 50);
                no.Text = "Cancel";
                no.Size = yes.Size;
                no.Location = new System.Drawing.Point(yes.Location.X + 100, 50);

                yes.Click += yes_Click;
                no.Click += no_Click;

                formPopup.AcceptButton = yes;
                formPopup.CancelButton = no;
                formPopup.Controls.Add(text);
                formPopup.Controls.Add(yes);
                formPopup.Controls.Add(no);

                formPopup.ClientSize = new System.Drawing.Size(Math.Max(text.Width + 24, 300), yes.Bottom);

                formPopup.Show(this);
            }

            string newMessage = Malware.SelectedItem + "    --Killed";
            int index = Malware.SelectedIndex;
            Malware.Items[index] = newMessage;
        }

        private void yes_Click(object sender, EventArgs e)
        {
            Process p = scanned["cmd.exe"].process;
            p.Kill();
            ActiveForm.Close();
        }

        private void no_Click(object sender, EventArgs e)
        {
            ActiveForm.Close();
        }
    }
}
